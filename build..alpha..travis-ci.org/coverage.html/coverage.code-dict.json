{"/home/travis/build/npmtest/node-npmtest-redux-react-router/test.js":"/* istanbul instrument in package npmtest_redux_react_router */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redux-react-router/lib.npmtest_redux_react_router.js":"/* istanbul instrument in package npmtest_redux_react_router */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_redux_react_router = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_redux_react_router = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-redux-react-router/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-redux-react-router && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_redux_react_router */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_redux_react_router\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_redux_react_router.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_redux_react_router.rollup.js'] =\n            local.assetsDict['/assets.npmtest_redux_react_router.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_redux_react_router.__dirname + '/lib.npmtest_redux_react_router.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/index.js":"'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _routerStateReducer = require('./routerStateReducer');\n\nvar _routerStateReducer2 = _interopRequireDefault(_routerStateReducer);\n\nvar _reduxRouteComponent = require('./reduxRouteComponent');\n\nvar _reduxRouteComponent2 = _interopRequireDefault(_reduxRouteComponent);\n\nvar _transitionTo = require('./transitionTo');\n\nvar _transitionTo2 = _interopRequireDefault(_transitionTo);\n\nvar _replaceWith = require('./replaceWith');\n\nvar _replaceWith2 = _interopRequireDefault(_replaceWith);\n\nexports.routerStateReducer = _routerStateReducer2['default'];\nexports.reduxRouteComponent = _reduxRouteComponent2['default'];\nexports.transitionTo = _transitionTo2['default'];\nexports.replaceWith = _replaceWith2['default'];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/routerStateReducer.js":"'use strict';\n\nexports.__esModule = true;\nexports['default'] = routerStateReducer;\n\nvar _actionTypes = require('./actionTypes');\n\n/**\n * Reducer of LOCATION_DID_CHANGE actions. Returns a state object\n * with { pathname, query, params, navigationType }\n * @param  {Object} state - Previous state\n * @param  {Object} action - Action\n * @return {Object} New state\n */\n\nfunction routerStateReducer(state, action) {\n  if (state === undefined) state = {};\n\n  return action.type === _actionTypes.LOCATION_DID_CHANGE ? action.payload : state;\n}\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/actionTypes.js":"// There are three action types:\n//\n// 1. TRANSITION_TO is used by the application to trigger a route transition.\n// It depends on routerMiddleware to intercept the action and call\n// router.transitionTo(). The action never gets sent to the reducer.\n// 2. REPLACE_WITH is the same as TRANSITION_TO\n// 3. LOCATION_DID_CHANGE signals that the router's state has changed. It should\n// never be called by the application, only as an implementation detail of\n// redux-react-router.\n//\n// TRANSITION_TO/REPLACE_WITH are optional. Normal calls to\n// `transitionTo() / replaceWith()` — including via\n// the <Link /> component, will continue to work as expected.\n'use strict';\n\nexports.__esModule = true;\nvar TRANSITION_TO = '@@reduxReactRouter/transitionTo';\nexports.TRANSITION_TO = TRANSITION_TO;\nvar REPLACE_WITH = '@@reduxReactRouter/replaceWith';\nexports.REPLACE_WITH = REPLACE_WITH;\nvar LOCATION_DID_CHANGE = '@@reduxReactRouter/locationDidChange';\nexports.LOCATION_DID_CHANGE = LOCATION_DID_CHANGE;","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/reduxRouteComponent.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nexports['default'] = reduxRouteComponent;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _actionTypes = require('./actionTypes');\n\nvar _locationDidChange = require('./locationDidChange');\n\nvar _locationDidChange2 = _interopRequireDefault(_locationDidChange);\n\nvar _locationStateEquals = require('./locationStateEquals');\n\nvar _locationStateEquals2 = _interopRequireDefault(_locationStateEquals);\n\n/**\n * Middleware for intercepting actions with type TRANSITION_TO and initiating\n * a transition.\n * @param {Router} Router instance\n */\nfunction routerMiddleware(router) {\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (action.type === _actionTypes.TRANSITION_TO) {\n          var _action$payload = action.payload;\n          var pathname = _action$payload.pathname;\n          var query = _action$payload.query;\n          var state = _action$payload.state;\n\n          router.transitionTo(pathname, query, state);\n        } else if (action.type === _actionTypes.REPLACE_WITH) {\n          var _action$payload2 = action.payload;\n          var pathname = _action$payload2.pathname;\n          var query = _action$payload2.query;\n          var state = _action$payload2.state;\n\n          router.replaceWith(pathname, query, state);\n        } else {\n          return next(action);\n        }\n      };\n    };\n  };\n}\n\n/**\n * Creates a component to be used as the `component` prop of a <Route />. Also\n * adds the store to context, serving as a replacement for <Provider />\n * @param  {Object} store - Redux store\n * @return {Component}\n */\n\nfunction reduxRouteComponent(s) {\n  return (function (_Component) {\n    function ReduxRoute(props, context) {\n      var _this = this;\n\n      _classCallCheck(this, ReduxRoute);\n\n      _Component.call(this, props, context);\n      var router = this.context.router;\n      var dispatch = routerMiddleware(router)()(s.dispatch);\n      var store = _extends({}, s, { dispatch: dispatch });\n      this.state = { store: store };\n      this.unsubscribe = store.subscribe(function () {\n        return _this.onStateChange();\n      });\n      this.onLocationChange(props, this.state, context);\n    }\n\n    _inherits(ReduxRoute, _Component);\n\n    ReduxRoute.prototype.getChildContext = function getChildContext() {\n      return { store: this.state.store };\n    };\n\n    ReduxRoute.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n      this.onLocationChange(props);\n    };\n\n    ReduxRoute.prototype.storeIsInSyncWithRouter = function storeIsInSyncWithRouter() {\n      var state = arguments[0] === undefined ? this.state : arguments[0];\n      var context = arguments[1] === undefined ? this.context : arguments[1];\n\n      var storeState = state.store.getState();\n      var storeLocationState = storeState.router.state;\n      var routerLocationState = context.router.state.location.state; // LOL\n      return _locationStateEquals2['default'](storeLocationState, routerLocationState);\n    };\n\n    /**\n     * Update store state in response to router change\n     */\n\n    ReduxRoute.prototype.onLocationChange = function onLocationChange() {\n      var props = arguments[0] === undefined ? this.props : arguments[0];\n      var state = arguments[1] === undefined ? this.state : arguments[1];\n      var context = arguments[2] === undefined ? this.context : arguments[2];\n      var location = props.location;\n      var params = props.params;\n      var dispatch = state.store.dispatch;\n\n      if (!this.storeIsInSyncWithRouter(state, context)) {\n        dispatch(_locationDidChange2['default'](location, params));\n      }\n    };\n\n    /**\n     * Trigger transition in response to store change from external source —\n     * such as devtools or deserialization — by comparing location.state.key\n     */\n\n    ReduxRoute.prototype.onStateChange = function onStateChange() {\n      var storeState = this.state.store.getState();\n\n      // Exit early if route state does not exist\n      if (!storeState.router) {\n        console.warn('No router state was found at state.router. Ensure that the Redux ' + 'reducer has been property configured using routerStateReducer()');\n        return;\n      }\n\n      if (!this.storeIsInSyncWithRouter()) {\n        var _storeState$router = storeState.router;\n        var pathname = _storeState$router.pathname;\n        var query = _storeState$router.query;\n        var state = _storeState$router.state;\n\n        // Check that pathname is defined\n        if (pathname) {\n          this.context.router.transitionTo(pathname, query, state);\n        }\n      }\n    };\n\n    ReduxRoute.prototype.componentWillUnmount = function componentWillUnmount() {\n      this.unsubscribe();\n    };\n\n    ReduxRoute.prototype.render = function render() {\n      return this.props.children;\n    };\n\n    _createClass(ReduxRoute, null, [{\n      key: 'contextTypes',\n      value: {\n        router: _react.PropTypes.object\n      },\n      enumerable: true\n    }, {\n      key: 'childContextTypes',\n      value: {\n        store: _react.PropTypes.object\n      },\n      enumerable: true\n    }]);\n\n    return ReduxRoute;\n  })(_react.Component);\n}\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/locationDidChange.js":"'use strict';\n\nexports.__esModule = true;\nexports['default'] = locationDidChange;\n\nvar _actionTypes = require('./actionTypes');\n\n/**\n * Action creator for signaling that the router has changed.\n * @private\n * @param  {Location} location - Location object\n * @param  {Object} params - Route params\n * @return {Action} Action object\n */\n\nfunction locationDidChange(location, params) {\n  return {\n    type: _actionTypes.LOCATION_DID_CHANGE,\n    payload: {\n      pathname: location.pathname,\n      query: location.query,\n      navigationType: location.navigationType,\n      state: location.state,\n      params: params\n    }\n  };\n}\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/locationStateEquals.js":"/**\n * Check if two location states are equal, using location.key.\n * @param [object] l1 - Location state (HTML5 pushState)\n * @param [object] l2 - Location state (HTML5 pushState)\n * @returns {Boolean}\n */\n\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = locationStateEquals;\n\nfunction locationStateEquals(l1, l2) {\n  var l1Key = l1 && l1.key;\n  var l2Key = l2 && l2.key;\n  return l1Key === l2Key;\n}\n\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/replaceWith.js":"'use strict';\n\nexports.__esModule = true;\nexports['default'] = replaceWith;\n\nvar _actionTypes = require('./actionTypes');\n\n/**\n * Action creator for triggering a router url replacement. Accepts a payload which is\n * either a pathname or an object with { pathname, query, params, state },\n * corresponding to the params of router.replaceWith().\n * @param  {String|Object} payload - Pathname or object\n * @return {Object} Action object\n */\n\nfunction replaceWith(pathname, query, state) {\n  return {\n    type: _actionTypes.REPLACE_WITH,\n    payload: { pathname: pathname, query: query, state: state }\n  };\n}\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/shallowEqual.js":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = shallowEqual;\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var hasOwn = Object.prototype.hasOwnProperty;\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-redux-react-router/node_modules/redux-react-router/lib/transitionTo.js":"'use strict';\n\nexports.__esModule = true;\nexports['default'] = transitionTo;\n\nvar _actionTypes = require('./actionTypes');\n\n/**\n * Action creator for triggering a router transition. Accepts a payload which is\n * either a pathname or an object with { pathname, query, params, state },\n * corresponding to the params of router.transitionTo().\n * @param  {String|Object} payload - Pathname or object\n * @return {Object} Action object\n */\n\nfunction transitionTo(pathname, query, state) {\n  return {\n    type: _actionTypes.TRANSITION_TO,\n    payload: { pathname: pathname, query: query, state: state }\n  };\n}\n\nmodule.exports = exports['default'];"}